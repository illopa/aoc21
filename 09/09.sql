create or replace package AOC21_P09 as

    procedure part_one(pOut in out varchar2);
    procedure part_two(pOut in out varchar2);

end;
/
create or replace package body AOC21_P09 as

    /*

        -- DDL

        CREATE TABLE  "AOC21_D12_INPUT" 
        (	"ID" NUMBER GENERATED BY DEFAULT AS IDENTITY , 
            "COL001" VARCHAR2(1000), 
            CONSTRAINT "AOC21_D12_INPUT_PK" PRIMARY KEY ("ID")
        USING INDEX  ENABLE
        )     

        CREATE TABLE AOC21_D09_HEIGHTMAP AS
            SELECT t.ID, MOD(rownum - 1,100)+1 IDCOL, to_number(column_value) val, 0 BASIN FROM AOC21_D09_INPUT t,
            TABLE(APEX_STRING.split(t.COL001,''))

     */

    procedure part_one(pOut in out varchar2)
    is
    begin
        
        SELECT SUM(HVAL+1)
            INTO pOut
            FROM (
            SELECT hm.ID, hm.IDCOL, hm.val HVAL, nvl(t.val,10) T, nvl(l.val,10) L, nvl(b.val,10) B, nvl(r.val,10) R
                FROM AOC21_D09_HEIGHTMAP hm
                LEFT JOIN AOC21_D09_HEIGHTMAP t ON t.ID = (hm.ID - 1) AND t.IDCOL = hm.IDCOL
                LEFT JOIN AOC21_D09_HEIGHTMAP l ON l.ID = hm.ID AND l.IDCOL = (hm.IDCOL - 1)
                LEFT JOIN AOC21_D09_HEIGHTMAP b ON b.ID = (hm.ID + 1) AND b.IDCOL = hm.IDCOL
                LEFT JOIN AOC21_D09_HEIGHTMAP r ON r.ID = hm.ID  AND r.IDCOL = (hm.IDCOL + 1)
            )
            WHERE 
            HVAL < T AND HVAL < L AND HVAL < B  AND HVAL < R;

    end;

    procedure part_two(pOut in out varchar2)
    is
        vCount number;
        vOld number;
    begin

        -- reset BASIN
        UPDATE AOC21_D09_HEIGHTMAP
        SET BASIN = 0;
        
        -- init basin with lowpoint
        UPDATE AOC21_D09_HEIGHTMAP
            SET BASIN = ( (ID-1) * 1000) + IDCOL -1
            WHERE (ID,IDCOL) IN (
                    SELECT ID, IDCOL
                    FROM (
                        SELECT hm.ID, hm.IDCOL, hm.val HVAL, nvl(t.val,10) T, nvl(l.val,10) L, nvl(b.val,10) B, nvl(r.val,10) R
                            FROM AOC21_D09_HEIGHTMAP hm
                            LEFT JOIN AOC21_D09_HEIGHTMAP t ON t.ID = (hm.ID - 1) AND t.IDCOL = hm.IDCOL
                            LEFT JOIN AOC21_D09_HEIGHTMAP l ON l.ID = hm.ID AND l.IDCOL = (hm.IDCOL - 1)
                            LEFT JOIN AOC21_D09_HEIGHTMAP b ON b.ID = (hm.ID + 1) AND b.IDCOL = hm.IDCOL
                            LEFT JOIN AOC21_D09_HEIGHTMAP r ON r.ID = hm.ID  AND r.IDCOL = (hm.IDCOL + 1)
                    )
                    WHERE 
                    HVAL < T AND HVAL < L AND HVAL < B  AND HVAL < R
            );    

        vOld := 0;
        
        SELECT count(*)
            INTO vCount
            FROM AOC21_D09_HEIGHTMAP
            WHERE BASIN > 0;        

        -- htp.prn('vCount='||vCount||'<BR />');
        WHILE vOld < vCount 
            LOOP

            FOR cNew IN ( SELECT  ID, IDCOL, BASIN
                            FROM AOC21_D09_HEIGHTMAP
                            WHERE BASIN > 0 )
                LOOP

                    UPDATE AOC21_D09_HEIGHTMAP 
                    SET BASIN = cNew.BASIN
                    WHERE VAL < 9 AND BASIN = 0 AND (
                            ( ID = (cNew.ID -1) AND IDCOL = cNew.idcol ) or 
                            ( ID = (cNew.ID ) AND IDCOL = ( cNew.idcol - 1) ) or 
                            ( ID = (cNew.ID +1) AND IDCOL = cNew.idcol ) or 
                            ( ID = (cNew.ID ) AND IDCOL = (cNew.idcol +1) )
                    );
                END LOOP;

                vOld := vCount;
                SELECT count(*)
                    INTO vCount
                    FROM AOC21_D09_HEIGHTMAP
                    WHERE BASIN > 0;
                
                -- htp.prn('vCount='||vCount||'<BR />');
            END LOOP;

        -- aggregate multiplication
        select floor(EXP(SUM(LN(C)))) 
            into pOut
            from (

            select COUNT(*) c, bASIN FROM AOC21_D09_HEIGHTMAP where basin > 0 GROUP BY BASIN
            order by c desc
            ) where rownum<= 3;


    end;    

end;
/
declare
    vOut varchar2(100);
begin
    AOC21_P09.part_one(pOut => vOut);
    htp.prn('part one: illopa says '||vOut||'<BR />');

    AOC21_P09.part_two(pOut => vOut);
    htp.prn('part two: illopa says '||vOut||'<BR />');
end;
